<섹션3 - 소유권과 임대>

* Rust의 메모리 관리 규칙 | 소유권

  - 프로그램 메모리 관리
    - GC 사용: JS, Python 등
    - 수동으로 프로그래머가 관리: C, C++
    - 컴파일 시점에 메모리 관리 규칙을 검사: Rust

  - Rust의 메모리 관리 규칙
    - 변수의 범위 scope 가 끝나면 메모리 해제 ... 블록을 벗어나면 변수 무효
    - 스택과 힙 메모리
    - 기본 데이터 타입은 Stack으로 쉽게 관리 가능 (메모리 크기가 정해져있음)
    - 문자열 리터럴(string literal)은 프로그램에 고정으로 확보 (스택도 힙도 아니지만, 어쨌든 크기는 정해져있음) ... 불변(immutable)
    - 사용자가 입력하는 문자열은 어떻게?
      - 문자열(String) 타입
        - 변경 가능 (mutable)
        - 그 말인즉슨 길이가 늘어날 수도 있음
        - 따라서 컴파일 시점에 크기를 알 수 없음
        - 그러니까 힙(Heap)에 메모리 차지해야 한다
          ('스트링 리터럴'과 '스트링 힙'의 차이 ... 힙 메모리를 사용하는 문자열은 '스트링 힙', 메모리에 고정적으로 박혀있는 문자열은 '스트링 리터럴'인 듯하다...)

    - 소유권 규칙

    - 기본 데이터 타입은 소유권 개념이 적용이 안 됨
      - copy
      - Stack 에만 저장되는 값들

    - 함수 호출 시 소유권 이동
      - 
